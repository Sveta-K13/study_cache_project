{"version":3,"names":[],"mappings":"","sources":["memory.js"],"sourcesContent":["const memorySize = 20 * 1024;\nclass Memory {\n\n  constructor() {\n    this.memory = [];\n    for (let i = 0; i < memorySize; i++) {\n      this.memory[i] = 0; // выделена под программу\n    }\n  }\n\n  get(offset) {\n    return this.memory[offset];\n  }\n\n  set(offset, value) {\n    this.memory[offset] = value;\n  }\n\n  reserve(size) {\n    for (let i = 0; i < this.memory.length; i++) {\n      let placed = 0;\n      if (this.memory[i] === 0) { // свободно\n        for (let j = i; j < i + size; j++) {\n          if (this.memory[j] > 0) { // не влезает, занято\n            placed = 0;\n            i += size;\n            j = i; // for end\n          }\n          placed += 1;\n        }\n        if (placed === size) {\n          for (let j = i; j < i + size; j++) {\n            this.memory[j] = 1; // действительно заняли\n          }\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n}\n\nexport default Memory;\n"],"file":"memory.js"}